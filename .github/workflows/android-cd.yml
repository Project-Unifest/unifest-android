name: Android CD

env:
    GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx4g -Dorg.gradle.daemon=false"
    GRADLE_BUILD_ACTION_CACHE_DEBUG_ENABLED: true

on:
    pull_request:
        branches:
            - main

jobs:
    cd-build:
        runs-on: ubuntu-latest

        steps:
            -   name: Checkout
                uses: actions/checkout@v4
                with:
                    fetch-depth: 0  # ÏµúÍ∑º ÌÉúÍ∑∏Î•º ÌôïÏù∏ÌïòÍ∏∞ ÏúÑÌï¥ ÌïÑÏöîÌï©ÎãàÎã§

            -   name: Set up JDK 17
                uses: actions/setup-java@v4
                with:
                    distribution: 'corretto'
                    java-version: 17

            -   name: Generate unifest.jks
                run: echo '${{ secrets.UNIFEST_KEYSTORE }}' | base64 -d > ./app/unifest.jks

            -   name: Generate secrets.properties
                run: |
                    echo '${{ secrets.SECRETS_PROPERTIES }}' >> ./secrets.properties

            -   name: Generate local.properties
                run: |
                    echo '${{ secrets.LOCAL_PROPERTIES }}' >> ./local.properties

            -   name: Generate keystore.properties
                run: |
                    echo '${{ secrets.KEYSTORE_PROPERTIES }}' >> ./keystore.properties

            -   name: Generate google-services.json
                run: echo '${{ secrets.GOOGLE_SERVICES }}' | base64 -d > ./app/google-services.json

            -   name: Generate debug.keystore
                run: echo '${{ secrets.DEBUG_KEYSTORE }}' | base64 -d > ./debug.keystore

            -   name: Extract Version Name from libs.versions.toml
                run: |
                    set -euo pipefail
                    VERSION=$(grep "versionName" gradle/libs.versions.toml | sed -E 's/.*versionName\s*=\s*"([^"]+)".*/\1/')
                    if [[ -z "$VERSION" ]]; then
                      echo "Error: tomlÏóêÏÑú versionName Í∞íÏùÑ Ï∂îÏ∂úÌïòÏßÄ Î™ªÌñàÏäµÎãàÎã§." >&2
                      exit 1
                    fi
                    echo "version=v${VERSION}" >> "$GITHUB_OUTPUT"
                    echo "Version extracted from toml: v${VERSION}"
                id: extract_version

            -   name: Generate Release Notes
                id: release_notes
                run: |
                    # PR Ï†úÎ™© Í∞ÄÏ†∏Ïò§Í∏∞
                    PR_TITLE="${{ github.event.pull_request.title }}"

                    # Í∞ÄÏû• ÏµúÍ∑º ÌÉúÍ∑∏ Ï∞æÍ∏∞ (ÌòÑÏû¨ Î≤ÑÏ†Ñ Ïù¥Ï†ÑÏùò ÌÉúÍ∑∏)
                    LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

                    echo "## üöÄ Î≥ÄÍ≤ΩÏÇ¨Ìï≠: ${PR_TITLE}" > release_notes.txt
                    echo "" >> release_notes.txt

                    if [ -n "$LATEST_TAG" ]; then
                        echo "### Ïù¥Ï†Ñ Î≤ÑÏ†Ñ($LATEST_TAG)Î∂ÄÌÑ∞Ïùò Î≥ÄÍ≤ΩÏÇ¨Ìï≠:" >> release_notes.txt
                        # ÏµúÍ∑º ÌÉúÍ∑∏Î∂ÄÌÑ∞ ÌòÑÏû¨ÍπåÏßÄÏùò Ïª§Î∞ãÎßå Í∞ÄÏ†∏ÏòµÎãàÎã§
                        git log --pretty=format:"- %h %s (%an)" ${LATEST_TAG}..HEAD --no-merges >> release_notes.txt
                    else
                        echo "### Ïª§Î∞ã ÎÇ¥Ïó≠:" >> release_notes.txt
                        # ÌÉúÍ∑∏Í∞Ä ÏóÜÎäî Í≤ΩÏö∞ ÏµúÍ∑º 10Í∞ú Ïª§Î∞ãÎßå ÌëúÏãú
                        git log --pretty=format:"- %h %s (%an)" --no-merges -n 10 >> release_notes.txt
                        echo "" >> release_notes.txt
                        echo "(Ïù¥Ï†Ñ Î¶¥Î¶¨Ïä§ ÌÉúÍ∑∏Í∞Ä ÏóÜÏñ¥ ÏµúÍ∑º 10Í∞ú Ïª§Î∞ãÎßå ÌëúÏãúÌï©ÎãàÎã§)" >> release_notes.txt
                    fi

                    # Î¶¥Î¶¨Ïä§ ÎÖ∏Ìä∏ ÎÇ¥Ïö©ÏùÑ Ï∂úÎ†•ÏúºÎ°ú Ï†ÄÏû•
                    NOTES=$(cat release_notes.txt)
                    echo "notes<<EOF" >> $GITHUB_OUTPUT
                    echo "$NOTES" >> $GITHUB_OUTPUT
                    echo "EOF" >> $GITHUB_OUTPUT

                    # ÌååÏù¥Ïñ¥Î≤†Ïù¥Ïä§Ïö© Î¶¥Î¶¨Ïä§ ÎÖ∏Ìä∏ ÌååÏùº ÏÉùÏÑ±
                    cat release_notes.txt > firebase_notes.txt

            -   name: Build Debug APK
                run: |
                    ./gradlew :app:assembleDebug

            -   name: Upload Debug Build to Artifacts
                uses: actions/upload-artifact@v4
                with:
                    name: debug-artifacts
                    path: app/build/outputs/apk/debug/
                    if-no-files-found: error

            -   name: Create Github Release
                uses: softprops/action-gh-release@v1
                with:
                    tag_name: ${{ steps.extract_version.outputs.version }}
                    release_name: ${{ steps.extract_version.outputs.version }}
                    body: ${{ steps.release_notes.outputs.notes }}

            -   name: Upload artifact to Firebase App Distribution
                uses: wzieba/Firebase-Distribution-Github-Action@v1
                with:
                    appId: ${{secrets.FIREBASE_DEBUG_APP_ID}}
                    serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
                    groups: testers
                    file: app/build/outputs/apk/debug/app-debug.apk
                    releaseNotes: file:firebase_notes.txt
